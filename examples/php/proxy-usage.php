<?php
namespace ccxt;
include_once (__DIR__.'/../../ccxt.php');
// ----------------------------------------------------------------------------

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

// -----------------------------------------------------------------------------

error_reporting(E_ALL | E_STRICT);
date_default_timezone_set('UTC');

use ccxt\Precise;
use React\Async;
use React\Promise;


// AUTO-TRANSPILE //
function example_1() {
    return Async\async(function () {
        $my_ex = new \ccxt\async\kucoin();
        $my_ex->proxy_url = 'https://cors-anywhere.herokuapp.com/'; // It prepends redirect url to requests, so requests leads to call url i.e.: https://cors-anywhere.herokuapp.com/?https://target_url.com . It might be useful for simple redirection or CORS bypassing purposes (Note, this will not work for websocket connections, but only for REST calls).
        var_dump(Async\await($my_ex->fetch('https://api.ipify.org/')));
    }) ();
}


function example_2() {
    return Async\async(function () {
        $my_ex = new \ccxt\async\kucoin();
        // choose "httpProxy" or "httpsProxy" depending on your proxy url protocol
        $my_ex->https_proxy = 'http://51.83.140.52:11230'; // It sets a real proxy for communication, so calls are made directly to url https://target_url.com , but tunneled through a proxy server (Note, this might work for websocket connections too).
        var_dump(Async\await($my_ex->fetch('https://api.ipify.org/')));
    }) ();
}


function example_3() {
    return Async\async(function () {
        $my_ex = new \ccxt\async\kucoin();
        $my_ex->socks_proxy = 'socks5://127.0.0.1:1080'; // It is for socks5 or socks5h proxy (Note, this might work for websocket connections too).
        var_dump(Async\await($my_ex->fetch('https://api.ipify.org/')));
    }) ();
}


// Note, you can use your callback (instead of string value) for each of them, i.e.:
//
//
//     myEx.proxyUrlCallback = function (url, method, headers, body) { return 'xyz'; }
//
// or
//
//     myEx.proxyUrlCallback = mycallback;
//
// Note, in PHP you can also pass a callback's string with a qualified namespace/class name, i.e. '\yourFunction' or '\yourNamesPace\yourFunction'
Async\await(example_1());
