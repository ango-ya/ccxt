<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\async\abstract\bingx as Exchange;
use ccxt\ExchangeError;
use ccxt\ArgumentsRequired;
use ccxt\BadRequest;
use ccxt\BadSymbol;
use ccxt\InvalidOrder;
use ccxt\NotSupported;
use ccxt\Precise;
use React\Async;
use React\Promise;

class bingx extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'bingx',
            'name' => 'BingX',
            'countries' => array( 'US' ), // North America, Canada, the EU, Hong Kong and Taiwan
            // cheapest is 60 requests a minute = 1 requests per second on average => ( 1000ms / 1) = 1000 ms between requests on average
            'rateLimit' => 1000,
            'version' => 'v1',
            'certified' => true,
            'pro' => true,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => true,
                'swap' => true,
                'future' => false,
                'option' => false,
                'cancelAllOrders' => true,
                'cancelOrder' => true,
                'cancelOrders' => true,
                'createOrder' => true,
                'fetchBalance' => true,
                'fetchClosedOrders' => true,
                'fetchCurrencies' => true,
                'fetchDeposits' => true,
                'fetchDepositWithdrawFee' => 'emulated',
                'fetchDepositWithdrawFees' => true,
                'fetchFundingRate' => true,
                'fetchFundingRateHistory' => true,
                'fetchLeverage' => true,
                'fetchMarkets' => true,
                'fetchOHLCV' => true,
                'fetchOpenInterest' => true,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchPositions' => true,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => true,
                'fetchTrades' => true,
                'fetchTransfers' => true,
                'fetchWithdrawals' => true,
                'setLeverage' => true,
                'setMagin' => true,
                'setMarginMode' => true,
                'transfer' => true,
            ),
            'hostname' => 'bingx.com',
            'urls' => array(
                'logo' => 'https://github-production-user-asset-6210df.s3.amazonaws.com/1294454/253675376-6983b72e-4999-4549-b177-33b374c195e3.jpg',
                'api' => array(
                    'spot' => 'https://open-api.{hostname}/openApi',
                    'swap' => 'https://open-api.{hostname}/openApi',
                    'contract' => 'https://open-api.{hostname}/openApi',
                    'wallets' => 'https://open-api.{hostname}/openApi',
                ),
                'www' => 'https://bingx.com/',
                'doc' => 'https://bingx-api.github.io/docs/',
                'referral' => 'https://bingx.com/invite/OHETOM',
                'fees' => array(
                    'trading' => array(
                        'tierBased' => true,
                    ),
                ),
            ),
            'requiredCredentials' => array(
                'apiKey' => true,
                'secret' => true,
            ),
            'api' => array(
                'spot' => array(
                    'v1' => array(
                        'public' => array(
                            'get' => array(
                                'common/symbols' => 3,
                                'market/trades' => 3,
                                'market/depth' => 3,
                            ),
                        ),
                        'private' => array(
                            'get' => array(
                                'trade/query' => 3,
                                'trade/openOrders' => 3,
                                'trade/historyOrders' => 3,
                                'account/balance' => 3,
                            ),
                            'post' => array(
                                'trade/order' => 3,
                                'trade/cancel' => 3,
                            ),
                        ),
                    ),
                    'v3' => array(
                        'private' => array(
                            'get' => array(
                                'get/asset/transfer' => 3,
                                'asset/transfer' => 3,
                                'capital/deposit/hisrec' => 3,
                                'capital/withdraw/history' => 3,
                            ),
                        ),
                    ),
                ),
                'swap' => array(
                    'v2' => array(
                        'public' => array(
                            'get' => array(
                                'server/time' => 3,
                                'quote/contracts' => 1,
                                'quote/price' => 1,
                                'quote/depth' => 1,
                                'quote/trades' => 1,
                                'quote/premiumIndex' => 1,
                                'quote/fundingRate' => 1,
                                'quote/klines' => 1,
                                'quote/openInterest' => 1,
                                'quote/ticker' => 1,
                            ),
                        ),
                        'private' => array(
                            'get' => array(
                                'user/balance' => 3,
                                'user/positions' => 3,
                                'user/income' => 3,
                                'trade/openOrders' => 3,
                                'trade/order' => 3,
                                'trade/marginType' => 3,
                                'trade/leverage' => 3,
                                'trade/forceOrders' => 3,
                                'trade/allOrders' => 3,
                                'trade/allFillOrders' => 3,
                                'user/income/export' => 3,
                                'user/commissionRate' => 3,
                                'quote/bookTicker' => 3,
                            ),
                            'post' => array(
                                'trade/order' => 3,
                                'trade/batchOrders' => 3,
                                'trade/closeAllPositions' => 3,
                                'trade/marginType' => 3,
                                'trade/leverage' => 3,
                                'trade/positionMargin' => 3,
                                'trade/order/test' => 3,
                            ),
                            'delete' => array(
                                'trade/order' => 3,
                                'trade/batchOrders' => 3,
                                'trade/allOpenOrders' => 3,
                            ),
                        ),
                    ),
                ),
                'contract' => array(
                    'v1' => array(
                        'private' => array(
                            'get' => array(
                                'allPosition' => 3,
                                'allOrders' => 3,
                                'balance' => 3,
                            ),
                        ),
                    ),
                ),
                'wallets' => array(
                    'v1' => array(
                        'private' => array(
                            'get' => array(
                                'capital/config/getall' => 3,
                            ),
                            'post' => array(
                                'capital/withdraw/apply' => 3,
                            ),
                        ),
                    ),
                ),
            ),
            'timeframes' => array(
                '1m' => '1m',
                '3m' => '3m',
                '5m' => '5m',
                '15m' => '15m',
                '30m' => '30m',
                '1h' => '1h',
                '2h' => '2h',
                '4h' => '4h',
                '6h' => '6h',
                '12h' => '12h',
                '1d' => '1d',
                '3d' => '3d',
                '1w' => '1w',
                '1M' => '1M',
            ),
            'fees' => array(
                'trading' => array(
                ),
            ),
            'precisionMode' => DECIMAL_PLACES,
            'exceptions' => array(
                'exact' => array(
                    '400' => '\\ccxt\\BadRequest',
                    '401' => '\\ccxt\\AuthenticationError',
                    '403' => '\\ccxt\\PermissionDenied',
                    '404' => '\\ccxt\\BadRequest',
                    '429' => '\\ccxt\\DDoSProtection',
                    '418' => '\\ccxt\\PermissionDenied',
                    '500' => '\\ccxt\\ExchangeError',
                    '504' => '\\ccxt\\ExchangeError',
                    '100001' => '\\ccxt\\AuthenticationError',
                    '100202' => '\\ccxt\\InsufficientFunds',
                    '100400' => '\\ccxt\\BadRequest',
                    '100440' => '\\ccxt\\ExchangeError',
                    '100500' => '\\ccxt\\ExchangeError',
                    '100503' => '\\ccxt\\ExchangeError',
                    '80001' => '\\ccxt\\BadRequest',
                    '80012' => '\\ccxt\\ExchangeNotAvailable',
                    '80014' => '\\ccxt\\BadRequest',
                    '80016' => '\\ccxt\\OrderNotFound',
                    '80017' => '\\ccxt\\OrderNotFound',
                    '100437' => '\\ccxt\\BadRequest', // array("code":100437,"msg":"The withdrawal amount is lower than the minimum limit, please re-enter.","timestamp":1689258588845)
                ),
                'broad' => array(),
            ),
            'commonCurrencies' => array(
            ),
            'options' => array(
                'accountsByType' => array(
                    'spot' => 'FUND',
                    'swap' => 'PFUTURES',
                    'future' => 'SFUTURES',
                ),
                'accountsById' => array(
                    'FUND' => 'spot',
                    'PFUTURES' => 'swap',
                    'SFUTURES' => 'future',
                ),
            ),
        ));
    }

    public function fetch_time($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * fetches the current integer timestamp in milliseconds from the bingx server
             * @see https://bingx-api.github.io/docs/#/swapV2/base-info.html#Get%20Server%20Time
             * @param {array} [$params] extra parameters specific to the bingx api endpoint
             * @return {int} the current integer timestamp in milliseconds from the bingx server
             */
            $response = Async\await($this->swapV2PublicGetServerTime ($params));
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "data" => {
            //            "serverTime" => 1675319535362
            //        }
            //    }
            //
            $data = $this->safe_value($response, 'data');
            return $this->safe_integer($data, 'serverTime');
        }) ();
    }

    public function fetch_currencies($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * fetches all available currencies on an exchange
             * @see https://bingx-api.github.io/docs/#/common/account-api.html#All%20Coins
             * @param {array} [$params] extra parameters specific to the bingx api endpoint
             * @return {array} an associative dictionary of currencies
             */
            if (!$this->check_required_credentials(false)) {
                return null;
            }
            $response = Async\await($this->walletsV1PrivateGetCapitalConfigGetall ($params));
            //
            //    {
            //        'code' => 0,
            //        'timestamp' => 1688045966616,
            //        'data' => array(
            //            {
            //              coin => 'BTC',
            //              $name => 'BTC',
            //              $networkList => array(
            //                array(
            //                  $name => 'BTC',
            //                  $network => 'BTC',
            //                  $isDefault => true,
            //                  minConfirm => '2',
            //                  withdrawEnable => true,
            //                  withdrawFee => '0.00035',
            //                  withdrawMax => '1.62842',
            //                  withdrawMin => '0.0005'
            //                ),
            //                array(
            //                  $name => 'BTC',
            //                  $network => 'BEP20',
            //                  $isDefault => false,
            //                  minConfirm => '15',
            //                  withdrawEnable => true,
            //                  withdrawFee => '0.00001',
            //                  withdrawMax => '1.62734',
            //                  withdrawMin => '0.0001'
            //                }
            //              )
            //          ),
            //          ...
            //        ),
            //    }
            //
            $data = $this->safe_value($response, 'data', array());
            $result = array();
            for ($i = 0; $i < count($data); $i++) {
                $entry = $data[$i];
                $currencyId = $this->safe_string($entry, 'coin');
                $code = $this->safe_currency_code($currencyId);
                $name = $this->safe_string($entry, 'name');
                $networkList = $this->safe_value($entry, 'networkList');
                $networks = array();
                $fee = null;
                $active = null;
                $withdrawEnabled = null;
                $defaultLimits = array();
                for ($j = 0; $j < count($networkList); $j++) {
                    $rawNetwork = $networkList[$j];
                    $network = $this->safe_string($rawNetwork, 'network');
                    $networkCode = $this->network_id_to_code($network);
                    $isDefault = $this->safe_value($rawNetwork, 'isDefault');
                    $withdrawEnabled = $this->safe_value($rawNetwork, 'withdrawEnable');
                    $limits = array(
                        'amounts' => array( 'min' => $this->safe_number($rawNetwork, 'withdrawMin'), 'max' => $this->safe_number($rawNetwork, 'withdrawMax') ),
                    );
                    if ($isDefault) {
                        $fee = $this->safe_number($rawNetwork, 'withdrawFee');
                        $active = $withdrawEnabled;
                        $defaultLimits = $limits;
                    }
                    $networks[$networkCode] = array(
                        'info' => $rawNetwork,
                        'id' => $network,
                        'network' => $networkCode,
                        'fee' => $fee,
                        'active' => $active,
                        'deposit' => null,
                        'withdraw' => $withdrawEnabled,
                        'precision' => null,
                        'limits' => $limits,
                    );
                }
                $result[$code] = array(
                    'info' => $entry,
                    'code' => $code,
                    'id' => $currencyId,
                    'precision' => null,
                    'name' => $name,
                    'active' => $active,
                    'deposit' => null,
                    'withdraw' => $withdrawEnabled,
                    'networks' => $networks,
                    'fee' => $fee,
                    'limits' => $defaultLimits,
                );
            }
            return $result;
        }) ();
    }

    public function fetch_spot_markets($params) {
        return Async\async(function () use ($params) {
            $response = Async\await($this->spotV1PublicGetCommonSymbols ($params));
            //
            //    {
            //        "code" => 0,
            //            "msg" => "",
            //            "debugMsg" => "",
            //            "data" => {
            //              "symbols" => array(
            //                  array(
            //                    "symbol" => "GEAR-USDT",
            //                    "minQty" => 735,
            //                    "maxQty" => 2941177,
            //                    "minNotional" => 5,
            //                    "maxNotional" => 20000,
            //                    "status" => 1,
            //                    "tickSize" => 0.000001,
            //                    "stepSize" => 1
            //                  ),
            //                  ...
            //              )
            //         }
            //    }
            //
            $result = array();
            $data = $this->safe_value($response, 'data');
            $markets = $this->safe_value($data, 'symbols', array());
            for ($i = 0; $i < count($markets); $i++) {
                $result[] = $this->parse_market($markets[$i]);
            }
            return $result;
        }) ();
    }

    public function fetch_swap_markets($params) {
        return Async\async(function () use ($params) {
            $response = Async\await($this->swapV2PublicGetQuoteContracts ($params));
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "data" => array(
            //            array(
            //              "contractId" => "100",
            //              "symbol" => "BTC-USDT",
            //              "size" => "0.0001",
            //              "quantityPrecision" => 4,
            //              "pricePrecision" => 1,
            //              "feeRate" => 0.0005,
            //              "tradeMinLimit" => 1,
            //              "maxLongLeverage" => 150,
            //              "maxShortLeverage" => 150,
            //              "currency" => "USDT",
            //              "asset" => "BTC",
            //              "status" => 1
            //            ),
            //            ...
            //        )
            //    }
            //
            $result = array();
            $markets = $this->safe_value($response, 'data');
            for ($i = 0; $i < count($markets); $i++) {
                $result[] = $this->parse_market($markets[$i]);
            }
            return $result;
        }) ();
    }

    public function parse_market($market) {
        $id = $this->safe_string($market, 'symbol');
        $symbolParts = explode('-', $id);
        $baseId = $symbolParts[0];
        $quoteId = $symbolParts[1];
        $base = $this->safe_currency_code($baseId);
        $quote = $this->safe_currency_code($quoteId);
        $currency = $this->safe_string($market, 'currency');
        $settle = $this->safe_currency_code($currency);
        $pricePrecision = $this->safe_integer($market, 'pricePrecision');
        if ($pricePrecision === null) {
            $pricePrecision = $this->precision_from_string($this->safe_string($market, 'tickSize'));
        }
        $quantityPrecision = $this->safe_integer($market, 'quantityPrecision');
        if ($quantityPrecision === null) {
            $quantityPrecision = $this->precision_from_string($this->safe_string($market, 'stepSize'));
        }
        $type = ($settle !== null) ? 'swap' : 'spot';
        $spot = $type === 'spot';
        $swap = $type === 'swap';
        $symbol = $base . '/' . $quote;
        if ($settle !== null) {
            $symbol .= ':' . $settle;
        }
        $contractSize = $this->safe_number($market, 'size');
        $isActive = $this->safe_string($market, 'status') === '1';
        $isInverse = ($spot) ? null : false;
        $isLinear = ($spot) ? null : $swap;
        $entry = array(
            'id' => $id,
            'symbol' => $symbol,
            'base' => $base,
            'quote' => $quote,
            'settle' => $settle,
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'settleId' => $currency,
            'type' => $type,
            'spot' => $spot,
            'margin' => false,
            'swap' => $swap,
            'future' => false,
            'option' => false,
            'active' => $isActive,
            'contract' => $swap,
            'linear' => $isLinear,
            'inverse' => $isInverse,
            'taker' => null,
            'maker' => null,
            'contractSize' => $contractSize,
            'expiry' => null,
            'expiryDatetime' => null,
            'strike' => null,
            'optionType' => null,
            'precision' => array(
                'amount' => $quantityPrecision,
                'price' => $pricePrecision,
                'base' => null,
                'quote' => null,
            ),
            'limits' => array(
                'leverage' => array(
                    'min' => null,
                    'max' => $this->safe_integer($market, 'maxLongLeverage'),
                ),
                'amount' => array(
                    'min' => $this->safe_number($market, 'minQty'),
                    'max' => $this->safe_number($market, 'maxQty'),
                ),
                'price' => array(
                    'min' => null,
                    'max' => null,
                ),
                'cost' => array(
                    'min' => $this->safe_number($market, 'minNotional'),
                    'max' => $this->safe_number($market, 'maxNotional'),
                ),
            ),
            'info' => $market,
        );
        return $entry;
    }

    public function fetch_markets($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * retrieves data on all markets for bingx
             * @see https://bingx-api.github.io/docs/#/spot/market-api.html#Query%20Symbols
             * @see https://bingx-api.github.io/docs/#/swapV2/market-api.html#Contract%20Information
             * @param {array} [$params] extra parameters specific to the exchange api endpoint
             * @return {[array]} an array of objects representing market data
             */
            $requests = array( $this->fetch_spot_markets($params), $this->fetch_swap_markets($params) );
            $promises = Async\await(Promise\all($requests));
            $spotMarkets = $this->safe_value($promises, 0, array());
            $swapMarkets = $this->safe_value($promises, 1, array());
            return $this->array_concat($spotMarkets, $swapMarkets);
        }) ();
    }

    public function fetch_ohlcv(string $symbol, $timeframe = '1m', ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $timeframe, $since, $limit, $params) {
            /**
             * fetches historical candlestick data containing the open, high, low, and close price, and the volume of a $market
             * @see https://bingx-api.github.io/docs/#/swapV2/market-api.html#K-Line%20Data
             * @param {string} $symbol unified $symbol of the $market to fetch OHLCV data for
             * @param {string} $timeframe the length of time each candle represents
             * @param {int} [$since] timestamp in ms of the earliest candle to fetch
             * @param {int} [$limit] the maximum amount of candles to fetch
             * @param {array} [$params] extra parameters specific to the bingx api endpoint
             * @param {string} [$params->price] "mark" or "index" for mark price and index price candles
             * @param {int} [$params->until] timestamp in ms of the latest candle to fetch
             * @return {[[int]]} A list of candles ordered, open, high, low, close, volume
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            $request['interval'] = $this->safe_string($this->timeframes, $timeframe, $timeframe);
            if ($since !== null) {
                $request['startTime'] = $since;
            }
            if ($limit !== null) {
                $request['limit'] = $limit;
            } else {
                $request['limit'] = 50;
            }
            if ($market['spot']) {
                throw new NotSupported($this->id . ' fetchOHLCV is not supported for spot markets');
            }
            $response = Async\await($this->swapV2PublicGetQuoteKlines (array_merge($request, $params)));
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "data" => array(
            //          array(
            //            "open" => "19396.8",
            //            "close" => "19394.4",
            //            "high" => "19397.5",
            //            "low" => "19385.7",
            //            "volume" => "110.05",
            //            "time" => 1666583700000
            //          ),
            //          ...
            //        )
            //    }
            //
            $ohlcvs = $this->safe_value($response, 'data', array());
            if (gettype($ohlcvs) === 'array') {
                $ohlcvs = array( $ohlcvs );
            }
            return $this->parse_ohlcvs($ohlcvs, $market, $timeframe, $since, $limit);
        }) ();
    }

    public function parse_ohlcv($ohlcv, $market = null) {
        //
        //    {
        //        "open" => "19394.4",
        //        "close" => "19379.0",
        //        "high" => "19394.4",
        //        "low" => "19368.3",
        //        "volume" => "167.44",
        //        "time" => 1666584000000
        //    }
        //
        return array(
            $this->safe_integer($ohlcv, 'time'),
            $this->safe_number($ohlcv, 'open'),
            $this->safe_number($ohlcv, 'high'),
            $this->safe_number($ohlcv, 'low'),
            $this->safe_number($ohlcv, 'close'),
            $this->safe_number($ohlcv, 'volume'),
        );
    }

    public function fetch_trades(string $symbol, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * get the list of most recent $trades for a particular $symbol
             * @see https://bingx-api.github.io/docs/#/spot/market-api.html#Query%20transaction%20records
             * @see https://bingx-api.github.io/docs/#/swapV2/market-api.html#The%20latest%20Trade%20of%20a%20Trading%20Pair
             * @param {string} $symbol unified $symbol of the $market to fetch $trades for
             * @param {int} [$since] timestamp in ms of the earliest trade to fetch
             * @param {int} [$limit] the maximum amount of $trades to fetch
             * @param {array} [$params] extra parameters specific to the bingx api endpoint
             * @return {[array]} a list of ~@link https://docs.ccxt.com/en/latest/manual.html?#public-$trades trade structures~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = null;
            $marketType = null;
            list($marketType, $params) = $this->handle_market_type_and_params('fetchTrades', $market, $params);
            if ($marketType === 'spot') {
                $response = Async\await($this->spotV1PublicGetMarketTrades (array_merge($request, $params)));
            } else {
                $response = Async\await($this->swapV2PublicGetQuoteTrades (array_merge($request, $params)));
            }
            //
            // spot
            //
            //    {
            //        "code" => 0,
            //        "data" => array(
            //            {
            //                "id" => 43148253,
            //                "price" => 25714.71,
            //                "qty" => 1.674571,
            //                "time" => 1655085975589,
            //                "buyerMaker" => false
            //            }
            //        )
            //    }
            //
            // swap
            //
            //    {
            //      "code":0,
            //      "msg":"",
            //      "data":array(
            //        array(
            //          "time" => 1672025549368,
            //          "isBuyerMaker" => true,
            //          "price" => "16885.0",
            //          "qty" => "3.3002",
            //          "quoteQty" => "55723.87"
            //        ),
            //        ...
            //      )
            //    }
            //
            $trades = $this->safe_value($response, 'data', array());
            return $this->parse_trades($trades, $market, $since, $limit);
        }) ();
    }

    public function parse_trade($trade, $market = null) {
        //
        // spot
        // fetchTrades
        //
        //    {
        //        "id" => 43148253,
        //        "price" => 25714.71,
        //        "qty" => 1.674571,
        //        "time" => 1655085975589,
        //        "buyerMaker" => false
        //    }
        //
        // swap
        // fetchTrades
        //
        //    {
        //        "time" => 1672025549368,
        //        "isBuyerMaker" => true,
        //        "price" => "16885.0",
        //        "qty" => "3.3002",
        //        "quoteQty" => "55723.87"
        //    }
        //
        // swap
        // fetchMyTrades
        //
        //    {
        //        volume => '0.1',
        //        price => '106.75',
        //        amount => '10.6750',
        //        commission => '-0.0053',
        //        currency => 'USDT',
        //        orderId => '1676213270274379776',
        //        liquidatedPrice => '0.00',
        //        liquidatedMarginRatio => '0.00',
        //        filledTime => '2023-07-04T20:56:01.000+0800'
        //    }
        //
        $time = $this->safe_integer_2($trade, 'time', 'filledTm');
        $datetimeId = $this->safe_string($trade, 'filledTm');
        if ($datetimeId !== null) {
            $time = $this->parse8601($datetimeId);
        }
        $isBuyerMaker = $this->safe_value_2($trade, 'buyerMaker', 'isBuyerMaker');
        $cost = $this->safe_string($trade, 'quoteQty');
        $type = ($cost === null) ? 'spot' : 'swap';
        $currencyId = $this->safe_string($trade, 'currency');
        $currencyCode = $this->safe_currency_code($currencyId);
        return $this->safe_trade(array(
            'id' => $this->safe_string_2($trade, 'id', 'orderId'),
            'info' => $trade,
            'timestamp' => $time,
            'datetime' => $this->iso8601($time),
            'symbol' => $this->safe_symbol(null, $market, '-', $type),
            'order' => null,
            'type' => null,
            'side' => null,
            'takerOrMaker' => ($isBuyerMaker === true) ? 'maker' : 'taker',
            'price' => $this->safe_string($trade, 'price'),
            'amount' => $this->safe_string_2($trade, 'qty', 'amount'),
            'cost' => $cost,
            'fee' => array(
                'cost' => $this->parse_number(Precise::string_abs($this->safe_string($trade, 'commission'))),
                'currency' => $currencyCode,
                'rate' => null,
            ),
        ), $market);
    }

    public function fetch_order_book(string $symbol, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $limit, $params) {
            /**
             * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
             * @see https://bingx-api.github.io/docs/#/spot/market-api.html#Query%20depth%20information
             * @see https://bingx-api.github.io/docs/#/swapV2/market-api.html#Get%20Market%20Depth
             * @param {string} $symbol unified $symbol of the $market to fetch the order book for
             * @param {int} [$limit] the maximum amount of order book entries to return
             * @param {array} [$params] extra parameters specific to the bingx api endpoint
             * @return {array} A dictionary of ~@link https://docs.ccxt.com/#/?id=order-book-structure order book structures~ indexed by $market symbols
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = null;
            $marketType = null;
            list($marketType, $params) = $this->handle_market_type_and_params('fetchOrderBook', $market, $params);
            if ($marketType === 'spot') {
                $response = Async\await($this->spotV1PublicGetMarketDepth (array_merge($request, $params)));
            } else {
                $response = Async\await($this->swapV2PublicGetQuoteDepth (array_merge($request, $params)));
            }
            //
            // spot
            //
            //     {
            //         "code" => 0,
            //         "data" => {
            //           "bids" => array(
            //             array(
            //               "26324.73",
            //               "0.37655"
            //             ),
            //             array(
            //               "26324.71",
            //               "0.31888"
            //             ),
            //         ),
            //         "asks" => array(
            //             array(
            //               "26340.30",
            //               "6.45221"
            //             ),
            //             array(
            //               "26340.15",
            //               "6.73261"
            //             ),
            //         )}
            //     }
            //
            // swap
            //
            //     {
            //         "code" => 0,
            //         "msg" => "",
            //         "data" => {
            //           "T" => 1683914263304,
            //           "bids" => array(
            //             array(
            //               "26300.90000000",
            //               "30408.00000000"
            //             ),
            //             array(
            //               "26300.80000000",
            //               "50906.00000000"
            //             ),
            //         ),
            //         "asks" => array(
            //             array(
            //               "26301.00000000",
            //               "43616.00000000"
            //             ),
            //             array(
            //               "26301.10000000",
            //               "49402.00000000"
            //             ),
            //         )}
            //     }
            //
            $orderbook = $this->safe_value($response, 'data', array());
            $timestamp = $this->safe_integer_2($orderbook, 'T', 'ts');
            return $this->parse_order_book($orderbook, $market['symbol'], $timestamp, 'bids', 'asks', 0, 1);
        }) ();
    }

    public function fetch_funding_rate(string $symbol, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetch the current funding rate
             * @see https://bingx-api.github.io/docs/#/swapV2/market-api.html#Current%20Funding%20Rate
             * @param {string} $symbol unified $market $symbol
             * @param {array} [$params] extra parameters specific to the bingx api endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=funding-rate-structure funding rate structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            $response = Async\await($this->swapV2PublicGetQuotePremiumIndex (array_merge($request, $params)));
            //
            //    {
            //        "code":0,
            //        "msg":"",
            //        "data":array(
            //          array(
            //            "symbol" => "BTC-USDT",
            //            "markPrice" => "16884.5",
            //            "indexPrice" => "16886.9",
            //            "lastFundingRate" => "0.0001",
            //            "nextFundingTime" => 1672041600000
            //          ),
            //          ...
            //        )
            //    }
            //
            $data = $this->safe_value($response, 'data', array());
            return $this->parse_funding_rate($data, $market);
        }) ();
    }

    public function parse_funding_rate($contract, $market = null) {
        //
        //     {
        //         "symbol" => "BTC-USDT",
        //         "markPrice" => "16884.5",
        //         "indexPrice" => "16886.9",
        //         "lastFundingRate" => "0.0001",
        //         "nextFundingTime" => 1672041600000
        //     }
        //
        $marketId = $this->safe_string($contract, 'symbol');
        $nextFundingTimestamp = $this->safe_integer($contract, 'nextFundingTime');
        return array(
            'info' => $contract,
            'symbol' => $this->safe_symbol($marketId, $market, '-', 'swap'),
            'markPrice' => $this->safe_number($contract, 'markPrice'),
            'indexPrice' => $this->safe_number($contract, 'indexPrice'),
            'interestRate' => null,
            'estimatedSettlePrice' => null,
            'timestamp' => null,
            'datetime' => null,
            'fundingRate' => $this->safe_number($contract, 'lastFundingRate'),
            'fundingTimestamp' => null,
            'fundingDatetime' => null,
            'nextFundingRate' => null,
            'nextFundingTimestamp' => $nextFundingTimestamp,
            'nextFundingDatetime' => $this->iso8601($nextFundingTimestamp),
            'previousFundingRate' => null,
            'previousFundingTimestamp' => null,
            'previousFundingDatetime' => null,
        );
    }

    public function fetch_funding_rate_history(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetches historical funding rate prices
             * @see https://bingx-api.github.io/docs/#/swapV2/market-api.html#Funding%20Rate%20History
             * @param {string} $symbol unified $symbol of the $market to fetch the funding rate history for
             * @param {int} [$since] $timestamp in ms of the earliest funding rate to fetch
             * @param {int} [$limit] the maximum amount of ~@link https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure funding rate structures~ to fetch
             * @param {array} [$params] extra parameters specific to the bingx api endpoint
             * @return {[array]} a list of ~@link https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure funding rate structures~
             */
            $this->check_required_symbol('fetchFundingRateHistory', $symbol);
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            if ($since !== null) {
                $request['startTime'] = $since;
            }
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = Async\await($this->swapV2PublicGetQuoteFundingRate (array_merge($request, $params)));
            //
            //    {
            //        "code":0,
            //        "msg":"",
            //        "data":array(
            //          array(
            //            "symbol" => "BTC-USDT",
            //            "fundingRate" => "0.0001",
            //            "fundingTime" => 1585684800000
            //          ),
            //          ...
            //        )
            //    }
            //
            $data = $this->safe_value($response, 'data', array());
            $rates = array();
            for ($i = 0; $i < count($data); $i++) {
                $entry = $data[$i];
                $marketId = $this->safe_string($entry, 'symbol');
                $symbolInner = $this->safe_symbol($marketId, $market, '-', 'swap');
                $timestamp = $this->safe_integer($entry, 'fundingTime');
                $rates[] = array(
                    'info' => $entry,
                    'symbol' => $symbolInner,
                    'fundingRate' => $this->safe_number($entry, 'fundingRate'),
                    'timestamp' => $timestamp,
                    'datetime' => $this->iso8601($timestamp),
                );
            }
            $sorted = $this->sort_by($rates, 'timestamp');
            return $this->filter_by_symbol_since_limit($sorted, $market['symbol'], $since, $limit);
        }) ();
    }

    public function fetch_open_interest(string $symbol, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            /**
             * Retrieves the open interest of a currency
             * @see https://bingx-api.github.io/docs/#/swapV2/market-api.html#Get%20Swap%20Open%20Positions
             * @param {string} $symbol Unified CCXT $market $symbol
             * @param {array} [$params] exchange specific parameters
             * @return {array} an open interest structurearray(@link https://docs.ccxt.com/#/?id=interest-history-structure)
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            $response = Async\await($this->swapV2PublicGetQuoteOpenInterest (array_merge($request, $params)));
            //
            //     {
            //         "code" => 0,
            //         "msg" => "",
            //         "data" => {
            //           "openInterest" => "3289641547.10",
            //           "symbol" => "BTC-USDT",
            //           "time" => 1672026617364
            //         }
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            return $this->parse_open_interest($data, $market);
        }) ();
    }

    public function parse_open_interest($interest, $market = null) {
        //
        //    {
        //        "openInterest" => "3289641547.10",
        //        "symbol" => "BTC-USDT",
        //        "time" => 1672026617364
        //    }
        //
        $timestamp = $this->safe_integer($interest, 'time');
        $id = $this->safe_string($interest, 'symbol');
        $symbol = $this->safe_symbol($id, $market, '-', 'swap');
        $openInterest = $this->safe_number($interest, 'openInterest');
        return array(
            'symbol' => $symbol,
            'openInterestAmount' => null,
            'openInterestValue' => $openInterest,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'info' => $interest,
        );
    }

    public function fetch_ticker(string $symbol, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
             * @see https://bingx-api.github.io/docs/#/swapV2/market-api.html#Get%20Ticker
             * @param {string} $symbol unified $symbol of the $market to fetch the ticker for
             * @param {array} [$params] extra parameters specific to the bingx api endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=ticker-structure ticker structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            if (!$market['swap']) {
                throw new BadRequest($this->id . ' fetchTicker is only supported for swap markets.');
            }
            $request = array(
                'symbol' => $market['id'],
            );
            $response = Async\await($this->swapV2PublicGetQuoteTicker (array_merge($request, $params)));
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "data" => {
            //          "symbol" => "BTC-USDT",
            //          "priceChange" => "52.5",
            //          "priceChangePercent" => "0.31",
            //          "lastPrice" => "16880.5",
            //          "lastQty" => "2.2238",
            //          "highPrice" => "16897.5",
            //          "lowPrice" => "16726.0",
            //          "volume" => "245870.1692",
            //          "quoteVolume" => "4151395117.73",
            //          "openPrice" => "16832.0",
            //          "openTime" => 1672026667803,
            //          "closeTime" => 1672026648425
            //        }
            //    }
            //
            $data = $this->safe_value($response, 'data');
            return $this->parse_ticker($data, $market);
        }) ();
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()) {
        return Async\async(function () use ($symbols, $params) {
            /**
             * fetches price $tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each $market
             * @see https://bingx-api.github.io/docs/#/swapV2/market-api.html#Get%20Ticker
             * @param {[string]|null} $symbols unified $symbols of the markets to fetch the ticker for, all $market $tickers are returned if not assigned
             * @param {array} [$params] extra parameters specific to the bingx api endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=ticker-structure ticker structures~
             */
            Async\await($this->load_markets());
            if ($symbols !== null) {
                $symbols = $this->market_symbols($symbols);
                $firstSymbol = $this->safe_string($symbols, 0);
                $market = $this->market($firstSymbol);
                if (!$market['swap']) {
                    throw new BadRequest($this->id . ' fetchTicker is only supported for swap markets.');
                }
            }
            $response = Async\await($this->swapV2PublicGetQuoteTicker ($params));
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "data" => array(
            //            array(
            //                "symbol" => "BTC-USDT",
            //                "priceChange" => "52.5",
            //                "priceChangePercent" => "0.31",
            //                "lastPrice" => "16880.5",
            //                "lastQty" => "2.2238",
            //                "highPrice" => "16897.5",
            //                "lowPrice" => "16726.0",
            //                "volume" => "245870.1692",
            //                "quoteVolume" => "4151395117.73",
            //                "openPrice" => "16832.0",
            //                "openTime" => 1672026667803,
            //                "closeTime" => 1672026648425
            //            ),
            //        )
            //    }
            //
            $tickers = $this->safe_value($response, 'data');
            return $this->parse_tickers($tickers, $symbols);
        }) ();
    }

    public function parse_ticker($ticker, $market = null) {
        //
        //    {
        //        "symbol" => "BTC-USDT",
        //        "priceChange" => "52.5",
        //        "priceChangePercent" => "0.31",
        //        "lastPrice" => "16880.5",
        //        "lastQty" => "2.2238",
        //        "highPrice" => "16897.5",
        //        "lowPrice" => "16726.0",
        //        "volume" => "245870.1692",
        //        "quoteVolume" => "4151395117.73",
        //        "openPrice" => "16832.0",
        //        "openTime" => 1672026667803,
        //        "closeTime" => 1672026648425
        //    }
        //
        $marketId = $this->safe_string($ticker, 'symbol');
        $defaultType = $this->safe_string($this->options, 'defaultType', 'swap');
        $symbol = $this->safe_symbol($marketId, $market, '-', $defaultType);
        $open = $this->safe_string($ticker, 'openPrice');
        $high = $this->safe_string($ticker, 'highPrice');
        $low = $this->safe_string($ticker, 'lowPrice');
        $close = $this->safe_string($ticker, 'lastPrice');
        $quoteVolume = $this->safe_string($ticker, 'quoteVolume');
        $baseVolume = $this->safe_string($ticker, 'volume');
        $change = $this->safe_string($ticker, 'chapriceChangenge');
        $percentage = $this->safe_string($ticker, 'priceChangePercent');
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => null,
            'datetime' => null,
            'high' => $high,
            'low' => $low,
            'bid' => null,
            'bidVolume' => null,
            'ask' => null,
            'askVolume' => null,
            'vwap' => null,
            'open' => $open,
            'close' => $close,
            'last' => null,
            'previousClose' => null,
            'change' => $change,
            'percentage' => $percentage,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => $quoteVolume,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_balance($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * query for balance and get the amount of funds available for trading or funds locked in orders
             * @see https://bingx-api.github.io/docs/#/spot/trade-api.html#Query%20Assets
             * @see https://bingx-api.github.io/docs/#/swapV2/account-api.html#Get%20Perpetual%20Swap%20Account%20Asset%20Information
             * @param {array} [$params] extra parameters specific to the cryptocom api endpoint
             * @return {array} a ~@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure balance structure~
             */
            Async\await($this->load_markets());
            $response = null;
            list($marketType, $marketTypeQuery) = $this->handle_market_type_and_params('fetchBalance', null, $params);
            if ($marketType === 'spot') {
                $response = Async\await($this->spotV1PrivateGetAccountBalance ($marketTypeQuery));
            } else {
                $response = Async\await($this->swapV2PrivateGetUserBalance ($marketTypeQuery));
            }
            //
            // spot
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "ttl" => 1,
            //        "data" => {
            //            "balances" => array(
            //                {
            //                    "asset" => "USDT",
            //                    "free" => "16.73971130673954",
            //                    "locked" => "0"
            //                }
            //            )
            //        }
            //    }
            //
            // swap
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "data" => {
            //          "balance" => {
            //            "asset" => "USDT",
            //            "balance" => "15.6128",
            //            "equity" => "15.6128",
            //            "unrealizedProfit" => "0.0000",
            //            "realisedProfit" => "0.0000",
            //            "availableMargin" => "15.6128",
            //            "usedMargin" => "0.0000",
            //            "freezedMargin" => "0.0000"
            //          }
            //        }
            //    }
            //
            return $this->parse_balance($response);
        }) ();
    }

    public function parse_balance($response) {
        $data = $this->safe_value($response, 'data');
        $balances = $this->safe_value_2($data, 'balance', 'balances');
        $result = array( 'info' => $response );
        if (gettype($balances) === 'array' && array_keys($balances) === array_keys(array_keys($balances))) {
            for ($i = 0; $i < count($balances); $i++) {
                $balance = $balances[$i];
                $currencyId = $this->safe_string($balance, 'asset');
                $code = $this->safe_currency_code($currencyId);
                $account = $this->account();
                $account['free'] = $this->safe_string($balance, 'free');
                $account['used'] = $this->safe_string($balance, 'locked');
                $result[$code] = $account;
            }
        } else {
            $currencyId = $this->safe_string($balances, 'asset');
            $code = $this->safe_currency_code($currencyId);
            $account = $this->account();
            $account['free'] = $this->safe_string($balances, 'availableMargin');
            $account['used'] = $this->safe_string($balances, 'usedMargin');
            $result[$code] = $account;
        }
        return $this->safe_balance($result);
    }

    public function fetch_positions(?array $symbols = null, $params = array ()) {
        return Async\async(function () use ($symbols, $params) {
            /**
             * fetch all open $positions
             * @see https://bingx-api.github.io/docs/#/swapV2/account-api.html#Perpetual%20Swap%20Positions
             * @param {[string]|null} $symbols list of unified market $symbols
             * @param {array} [$params] extra parameters specific to the bingx api endpoint
             * @return {[array]} a list of ~@link https://docs.ccxt.com/#/?id=position-structure position structure~
             */
            Async\await($this->load_markets());
            $symbols = $this->market_symbols($symbols);
            $response = Async\await($this->swapV2PrivateGetUserPositions ($params));
            //
            //    {
            //        "code" => 0,
            //            "msg" => "",
            //            "data" => array(
            //            {
            //                "symbol" => "BTC-USDT",
            //                "positionId" => "12345678",
            //                "positionSide" => "LONG",
            //                "isolated" => true,
            //                "positionAmt" => "123.33",
            //                "availableAmt" => "128.99",
            //                "unrealizedProfit" => "1.22",
            //                "realisedProfit" => "8.1",
            //                "initialMargin" => "123.33",
            //                "avgPrice" => "2.2",
            //                "leverage" => 10,
            //            }
            //        )
            //    }
            //
            $positions = $this->safe_value($response, 'data', array());
            return $this->parse_positions($positions, $symbols);
        }) ();
    }

    public function parse_position($position, $market = null) {
        //
        //     {
        //         "symbol" => "BTC-USDT",
        //         "positionId" => "12345678",
        //         "positionSide" => "LONG",
        //         "isolated" => true,
        //         "positionAmt" => "123.33",
        //         "availableAmt" => "128.99",
        //         "unrealizedProfit" => "1.22",
        //         "realisedProfit" => "8.1",
        //         "initialMargin" => "123.33",
        //         "avgPrice" => "2.2",
        //         "leverage" => 10,
        //     }
        //
        $marketId = $this->safe_string($position, 'symbol');
        $isolated = $this->safe_value($position, 'isolated');
        $marginMode = $isolated ? 'isolated' : 'cross';
        return $this->safe_position(array(
            'info' => $position,
            'id' => $this->safe_string($position, 'positionId'),
            'symbol' => $this->safe_symbol($marketId, $market, '-', 'swap'),
            'notional' => $this->safe_string($position, 'positionAmt'),
            'marginMode' => $marginMode,
            'liquidationPrice' => null,
            'entryPrice' => $this->safe_number($position, 'avgPrice'),
            'unrealizedPnl' => $this->safe_number($position, 'unrealizedProfit'),
            'percentage' => null,
            'contracts' => null,
            'contractSize' => null,
            'markPrice' => null,
            'lastPrice' => null,
            'side' => $this->safe_string_lower($position, 'positionSide'),
            'hedged' => null,
            'timestamp' => null,
            'datetime' => null,
            'lastUpdateTimestamp' => null,
            'maintenanceMargin' => null,
            'maintenanceMarginPercentage' => null,
            'collateral' => $this->safe_string($position, 'positionAmt'),
            'initialMargin' => $this->safe_number($position, 'initialMargin'),
            'initialMarginPercentage' => null,
            'leverage' => $this->safe_number($position, 'leverage'),
            'marginRatio' => null,
        ));
    }

    public function create_order(string $symbol, $type, string $side, $amount, $price = null, $params = array ()) {
        return Async\async(function () use ($symbol, $type, $side, $amount, $price, $params) {
            /**
             * create a trade order
             * @see https://bingx-api.github.io/docs/#/spot/trade-api.html#Create%20an%20Order
             * @see https://bingx-api.github.io/docs/#/swapV2/trade-api.html#Trade%20order
             * @param {string} $symbol unified $symbol of the $market to create an order in
             * @param {string} $type 'market' or 'limit'
             * @param {string} $side 'buy' or 'sell'
             * @param {float} $amount how much of currency you want to trade in units of base currency
             * @param {float} [$price] the $price at which the order is to be fullfilled, in units of the quote currency, ignored in $market orders
             * @param {array} [$params] extra parameters specific to the bingx api endpoint
             * @param {bool} [$params->postOnly] true to place a post only order
             * @param {array} [$params->triggerPrice] triggerPrice at which the attached take profit / stop loss order will be triggered (swap markets only)
             * @param {float} [$params->stopLossPrice] stop loss trigger $price (swap markets only)
             * @param {float} [$params->takeProfitPrice] take profit trigger $price (swap markets only)
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $response = null;
            list($marketType, $query) = $this->handle_market_type_and_params('createOrder', $market, $params);
            $type = strtoupper($type);
            $request = array(
                'symbol' => $market['id'],
                'type' => $type,
                'side' => strtoupper($side),
            );
            $isMarketOrder = $type === 'MARKET';
            $isSpotMarket = $marketType === 'spot';
            $stopPriceRaw = null;
            $stopPrice = null;
            $stopLossPrice = null;
            $takeProfitPrice = null;
            if (!$isSpotMarket) {
                $stopPriceRaw = $this->safe_value_2($params, 'stopPrice', 'triggerPrice');
                if ($stopPriceRaw !== null) {
                    $stopPrice = $this->price_to_precision($symbol, $stopPriceRaw);
                }
                $stopLossPrice = $this->safe_value($params, 'stopLossPrice');
                $takeProfitPrice = $this->safe_value($params, 'takeProfitPrice');
            }
            if (($stopLossPrice !== null) && ($takeProfitPrice !== null)) {
                throw new InvalidOrder('Order is either a takeProfit order or a stopLoss order');
            }
            if (($type === 'LIMIT') || ($type === 'TRIGGER_LIMIT')) {
                $request['price'] = $this->price_to_precision($symbol, $price);
                if (($stopPrice !== null)) {
                    $request['type'] = 'TRIGGER_LIMIT';
                    $request['stopPrice'] = $stopPrice;
                }
                if ($type === 'TRIGGER_LIMIT') {
                    if ($stopPrice === null) {
                        throw new InvalidOrder('TRIGGER_LIMIT requires a triggerPrice / stopPrice');
                    }
                    $request['stopPrice'] = $stopPrice;
                }
            }
            if ($isMarketOrder || ($type === 'TRIGGER_MARKET')) {
                if (($stopPrice !== null)) {
                    $request['type'] = 'TRIGGER_MARKET';
                    $request['stopPrice'] = $stopPrice;
                }
                if ($type === 'TRIGGER_MARKET') {
                    if ($stopPrice === null) {
                        throw new InvalidOrder('TRIGGER_MARKET requires a triggerPrice / stopPrice');
                    }
                    $request['stopPrice'] = $stopPrice;
                }
            }
            $exchangeSpecificTifParam = $this->safe_string_upper_n($params, array( 'force', 'timeInForce' ));
            $postOnly = null;
            list($postOnly, $params) = $this->handle_post_only($isMarketOrder, $exchangeSpecificTifParam === 'POC', $params);
            if ($isSpotMarket) {
                $createMarketBuyOrderRequiresPrice = $this->safe_value($this->options, 'createMarketBuyOrderRequiresPrice', true);
                if ($createMarketBuyOrderRequiresPrice && $isMarketOrder && ($side === 'buy')) {
                    if ($price === null) {
                        throw new InvalidOrder($this->id . ' createOrder() requires $price argument for $market buy orders on spot markets to calculate the total $amount to spend ($amount * $price), alternatively set the $createMarketBuyOrderRequiresPrice option to false and pass in the $cost to spend into the $amount parameter');
                    } else {
                        $amountString = $this->number_to_string($amount);
                        $priceString = $this->number_to_string($price);
                        $cost = $this->parse_number(Precise::string_mul($amountString, $priceString));
                        $request['quoteOrderQty'] = $this->price_to_precision($symbol, $cost);
                    }
                } else {
                    $request['quantity'] = $this->amount_to_precision($symbol, $amount);
                }
            } else {
                $request['quantity'] = $this->amount_to_precision($symbol, $amount);
            }
            if (($stopLossPrice !== null)) {
                $request['type'] = 'STOP_MARKET';
                $request['stopPrice'] = $this->price_to_precision($symbol, $stopLossPrice);
            }
            if (($takeProfitPrice !== null)) {
                $request['type'] = 'TAKE_PROFIT_MARKET';
                $request['stopPrice'] = $this->price_to_precision($symbol, $takeProfitPrice);
            }
            $request['timeInForce'] = 'IOC';
            if ($postOnly) {
                $request['timeInForce'] = 'POC';
            } elseif ($exchangeSpecificTifParam === 'POC') {
                $request['timeInForce'] = 'POC';
            }
            if ($isSpotMarket) {
                $response = Async\await($this->spotV1PrivatePostTradeOrder (array_merge($request, $query)));
            } else {
                $response = Async\await($this->swapV2PrivatePostTradeOrder (array_merge($request, $query)));
            }
            //
            // spot
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "data" => {
            //            "symbol" => "XRP-USDT",
            //            "orderId" => 1514090846268424192,
            //            "transactTime" => 1649822362855,
            //            "price" => "0.5",
            //            "origQty" => "10",
            //            "executedQty" => "0",
            //            "cummulativeQuoteQty" => "0",
            //            "status" => "PENDING",
            //            "type" => "LIMIT",
            //            "side" => "BUY"
            //        }
            //    }
            //
            // swap
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "data" => {
            //          "order" => {
            //            "symbol" => "BTC-USDT",
            //            "orderId" => 1590973236294713344,
            //            "side" => "BUY",
            //            "positionSide" => "LONG",
            //            "type" => "LIMIT"
            //          }
            //        }
            //    }
            //
            $data = $this->safe_value($response, 'data');
            $first = $this->safe_value($data, 'order', $data);
            return $this->parse_order($first, $market);
        }) ();
    }

    public function parse_order($order, $market = null) {
        //
        // spot
        // createOrder, cancelOrder
        //
        //    {
        //        "symbol" => "XRP-USDT",
        //        "orderId" => 1514090846268424192,
        //        "transactTime" => 1649822362855,
        //        "price" => "0.5",
        //        "origQty" => "10",
        //        "executedQty" => "0",
        //        "cummulativeQuoteQty" => "0",
        //        "status" => "PENDING",
        //        "type" => "LIMIT",
        //        "side" => "BUY"
        //    }
        //
        // fetchOrder
        //
        //    {
        //        $symbol => 'ETH-USDT',
        //        $orderId => '1660602123001266176',
        //        $price => '1700',
        //        origQty => '0.003',
        //        executedQty => '0',
        //        cummulativeQuoteQty => '0',
        //        status => 'PENDING',
        //        $type => 'LIMIT',
        //        $side => 'BUY',
        //        time => '1684753373276',
        //        updateTime => '1684753373276',
        //        origQuoteOrderQty => '0',
        //        $fee => '0',
        //        feeAsset => 'ETH'
        //    }
        //
        // fetchOpenOrders, fetchClosedOrders
        //
        //   {
        //       "symbol" => "XRP-USDT",
        //       "orderId" => 1514073325788200960,
        //       "price" => "0.5",
        //       "origQty" => "20",
        //       "executedQty" => "0",
        //       "cummulativeQuoteQty" => "0",
        //       "status" => "PENDING",
        //       "type" => "LIMIT",
        //       "side" => "BUY",
        //       "time" => 1649818185647,
        //       "updateTime" => 1649818185647,
        //       "origQuoteOrderQty" => "0"
        //   }
        //
        //
        // swap
        // createOrder
        //
        //    {
        //      "symbol" => "BTC-USDT",
        //      "orderId" => 1590973236294713344,
        //      "side" => "BUY",
        //      "positionSide" => "LONG",
        //      "type" => "LIMIT"
        //    }
        //
        // fetchOrder, fetchOpenOrders, fetchClosedOrders
        //
        //    {
        //        "symbol" => "LINK-USDT",
        //        "orderId" => 1585839271162413056,
        //        "side" => "BUY",
        //        "positionSide" => "LONG",
        //        "type" => "TRIGGER_MARKET",
        //        "origQty" => "5.0",
        //        "price" => "9",
        //        "executedQty" => "0.0",
        //        "avgPrice" => "0",
        //        "cumQuote" => "0",
        //        "stopPrice" => "5",
        //        "profit" => "0.0000",
        //        "commission" => "0.000000",
        //        "status" => "CANCELLED",
        //        "time" => 1667631605000,
        //        "updateTime" => 1667631605000
        //    }
        //
        $positionSide = $this->safe_string($order, 'positionSide');
        $marketType = ($positionSide === null) ? 'spot' : 'swap';
        $marketId = $this->safe_string($order, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market, '-', $marketType);
        $orderId = $this->safe_string($order, 'orderId');
        $side = $this->safe_string_lower($order, 'side');
        $type = $this->safe_string_lower($order, 'type');
        $timestamp = $this->safe_integer_2($order, 'time', 'transactTime');
        $lastTradeTimestamp = $this->safe_integer($order, 'updateTime');
        $price = $this->safe_string($order, 'price');
        $average = $this->safe_string($order, 'avgPrice');
        $amount = $this->safe_string($order, 'origQty');
        $filled = $this->safe_string($order, 'executedQty');
        $statusId = $this->safe_string($order, 'status');
        $fee = array(
            'currency' => $this->safe_string($order, 'feeAsset'),
            'rate' => $this->safe_string_2($order, 'fee', 'commission'),
        );
        return $this->safe_order(array(
            'info' => $order,
            'id' => $orderId,
            'clientOrderId' => null,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => $lastTradeTimestamp,
            'symbol' => $symbol,
            'type' => $type,
            'timeInForce' => null,
            'postOnly' => null,
            'side' => $side,
            'price' => $price,
            'stopPrice' => $this->safe_number($order, 'triggerPrice'),
            'triggerPrice' => $this->safe_number($order, 'triggerPrice'),
            'average' => $average,
            'cost' => null,
            'amount' => $amount,
            'filled' => $filled,
            'remaining' => null,
            'status' => $this->parse_order_status($statusId),
            'fee' => $fee,
            'trades' => null,
        ), $market);
    }

    public function parse_order_status($status) {
        $statuses = array(
            'NEW' => 'open',
            'PENDING' => 'open',
            'PARTIALLY_FILLED' => 'open',
            'FILLED' => 'closed',
            'CANCELLED' => 'canceled',
            'FAILED' => 'failed',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function cancel_order(string $id, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * cancels an open order
             * @see https://bingx-api.github.io/docs/#/spot/trade-api.html#Cancel%20an%20Order
             * @see https://bingx-api.github.io/docs/#/swapV2/trade-api.html#Cancel%20an%20Order
             * @param {string} $id order $id
             * @param {string} $symbol unified $symbol of the $market the order was made in
             * @param {array} [$params] extra parameters specific to the bingx api endpoint
             * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
             */
            $this->check_required_symbol('cancelOrder', $symbol);
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
                'orderId' => $id,
            );
            $response = null;
            list($marketType, $query) = $this->handle_market_type_and_params('cancelOrder', $market, $params);
            if ($marketType === 'spot') {
                $response = Async\await($this->spotV1PrivatePostTradeCancel (array_merge($request, $query)));
            } else {
                $response = Async\await($this->swapV2PrivateDeleteTradeOrder (array_merge($request, $query)));
            }
            //
            // spot
            //
            //   {
            //       "code" => 0,
            //       "msg" => "",
            //       "data" => {
            //           "symbol" => "XRP-USDT",
            //           "orderId" => 1514090846268424192,
            //           "price" => "0.5",
            //           "origQty" => "10",
            //           "executedQty" => "0",
            //           "cummulativeQuoteQty" => "0",
            //           "status" => "CANCELED",
            //           "type" => "LIMIT",
            //           "side" => "BUY"
            //       }
            //   }
            //
            // swap
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "data" => {
            //          "order" => {
            //            "symbol" => "LINK-USDT",
            //            "orderId" => 1597783850786750464,
            //            "side" => "BUY",
            //            "positionSide" => "LONG",
            //            "type" => "TRIGGER_MARKET",
            //            "origQty" => "5.0",
            //            "price" => "5.0000",
            //            "executedQty" => "0.0",
            //            "avgPrice" => "0.0000",
            //            "cumQuote" => "0",
            //            "stopPrice" => "5.0000",
            //            "profit" => "",
            //            "commission" => "",
            //            "status" => "CANCELLED",
            //            "time" => 1669776330000,
            //            "updateTime" => 1669776330000
            //          }
            //        }
            //    }
            //
            $data = $this->safe_value($response, 'data');
            $first = $this->safe_value($data, 'order', $data);
            return $this->parse_order($first, $market);
        }) ();
    }

    public function cancel_all_orders(?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            /**
             * cancel all open orders
             * @see https://bingx-api.github.io/docs/#/swapV2/trade-api.html#Cancel%20All%20Orders
             * @param {string} [$symbol] unified $market $symbol, only orders in the $market of this $symbol are cancelled when $symbol is not null
             * @param {array} [$params] extra parameters specific to the bingx api endpoint
             * @return {[array]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            $this->check_required_symbol('cancelAllOrders', $symbol);
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            if ($market['type'] !== 'swap') {
                throw new BadRequest($this->id . ' cancelAllOrders is only supported for swap markets.');
            }
            $request = array(
                'symbol' => $market['id'],
            );
            $response = Async\await($this->swapV2PrivateDeleteTradeAllOpenOrders (array_merge($request, $params)));
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "data" => {
            //          "success" => array(
            //            {
            //              "symbol" => "LINK-USDT",
            //              "orderId" => 1597783835095859200,
            //              "side" => "BUY",
            //              "positionSide" => "LONG",
            //              "type" => "TRIGGER_LIMIT",
            //              "origQty" => "5.0",
            //              "price" => "9.0000",
            //              "executedQty" => "0.0",
            //              "avgPrice" => "0.0000",
            //              "cumQuote" => "0",
            //              "stopPrice" => "9.5000",
            //              "profit" => "",
            //              "commission" => "",
            //              "status" => "NEW",
            //              "time" => 1669776326000,
            //              "updateTime" => 1669776326000
            //            }
            //          ),
            //          "failed" => null
            //        }
            //    }
            //
            return $response;
        }) ();
    }

    public function cancel_orders(array $ids, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($ids, $symbol, $params) {
            /**
             * cancel multiple orders
             * @see https://bingx-api.github.io/docs/#/swapV2/trade-api.html#Cancel%20a%20Batch%20of%20Orders
             * @param {[string]} $ids order $ids
             * @param {string} $symbol unified $market $symbol, default is null
             * @param {array} [$params] extra parameters specific to the bingx api endpoint
             * @return {array} an list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            $this->check_required_symbol('cancelOrders', $symbol);
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            if ($market['type'] !== 'swap') {
                throw new BadRequest($this->id . ' cancelOrders is only supported for swap markets.');
            }
            $request = array(
                'symbol' => $market['id'],
                'ids' => $ids,
            );
            $response = Async\await($this->swapV2PrivateDeleteTradeBatchOrders (array_merge($request, $params)));
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "data" => {
            //          "success" => array(
            //            {
            //              "symbol" => "LINK-USDT",
            //              "orderId" => 1597783850786750464,
            //              "side" => "BUY",
            //              "positionSide" => "LONG",
            //              "type" => "TRIGGER_MARKET",
            //              "origQty" => "5.0",
            //              "price" => "5.5710",
            //              "executedQty" => "0.0",
            //              "avgPrice" => "0.0000",
            //              "cumQuote" => "0",
            //              "stopPrice" => "5.0000",
            //              "profit" => "0.0000",
            //              "commission" => "0.000000",
            //              "status" => "CANCELLED",
            //              "time" => 1669776330000,
            //              "updateTime" => 1672370837000
            //            }
            //          ),
            //          "failed" => null
            //        }
            //    }
            //
            return $response;
        }) ();
    }

    public function fetch_order(string $id, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * fetches information on an order made by the user
             * @see https://bingx-api.github.io/docs/#/spot/trade-api.html#Query%20Orders
             * @see https://bingx-api.github.io/docs/#/swapV2/trade-api.html#Query%20Order
             * @param {string} $symbol unified $symbol of the $market the order was made in
             * @param {array} [$params] extra parameters specific to the bingx api endpoint
             * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
             */
            $this->check_required_symbol('fetchOrders', $symbol);
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
                'orderId' => $id,
            );
            $response = null;
            list($marketType, $query) = $this->handle_market_type_and_params('fetchOrder', $market, $params);
            if ($marketType === 'spot') {
                $response = Async\await($this->spotV1PrivateGetTradeQuery (array_merge($request, $query)));
            } else {
                $response = Async\await($this->swapV2PrivateGetTradeOrder (array_merge($request, $query)));
            }
            //
            // spot
            //
            //     {
            //         "code" => 0,
            //         "msg" => "",
            //         "data" => {
            //             "symbol" => "XRP-USDT",
            //             "orderId" => 1514087361158316032,
            //             "price" => "0.5",
            //             "origQty" => "10",
            //             "executedQty" => "0",
            //             "cummulativeQuoteQty" => "0",
            //             "status" => "CANCELED",
            //             "type" => "LIMIT",
            //             "side" => "BUY",
            //             "time" => 1649821532000,
            //             "updateTime" => 1649821543000,
            //             "origQuoteOrderQty" => "0",
            //             "fee" => "0",
            //             "feeAsset" => "XRP"
            //         }
            //     }
            //
            // swap
            //
            //      {
            //          "code" => 0,
            //          "msg" => "",
            //          "data" => {
            //            "order" => {
            //              "symbol" => "BTC-USDT",
            //              "orderId" => 1597597642269917184,
            //              "side" => "SELL",
            //              "positionSide" => "LONG",
            //              "type" => "TAKE_PROFIT_MARKET",
            //              "origQty" => "1.0000",
            //              "price" => "0.0",
            //              "executedQty" => "0.0000",
            //              "avgPrice" => "0.0",
            //              "cumQuote" => "",
            //              "stopPrice" => "16494.0",
            //              "profit" => "",
            //              "commission" => "",
            //              "status" => "FILLED",
            //              "time" => 1669731935000,
            //              "updateTime" => 1669752524000
            //            }
            //          }
            //      }
            //
            $data = $this->safe_value($response, 'data');
            $first = $this->safe_value($data, 'order', $data);
            return $this->parse_order($first, $market);
        }) ();
    }

    public function fetch_open_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * @see https://bingx-api.github.io/docs/#/spot/trade-api.html#Query%20Open%20Orders
             * @see https://bingx-api.github.io/docs/#/swapV2/trade-api.html#Query%20all%20current%20pending%20orders
             * fetch all unfilled currently open $orders
             * @param {string} $symbol unified $market $symbol
             * @param {int} [$since] the earliest time in ms to fetch open $orders for
             * @param {int} [$limit] the maximum number of open order structures to retrieve
             * @param {array} [$params] extra parameters specific to the bingx api endpoint
             * @return {[array]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            $this->check_required_symbol('fetchOrders', $symbol);
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            $response = null;
            list($marketType, $query) = $this->handle_market_type_and_params('fetchOrder', $market, $params);
            if ($marketType === 'spot') {
                $response = Async\await($this->spotV1PrivateGetTradeOpenOrders (array_merge($request, $query)));
            } else {
                $response = Async\await($this->swapV2PrivateGetTradeOpenOrders (array_merge($request, $query)));
            }
            //
            //  spot
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "data" => {
            //            "orders" => array(
            //                {
            //                    "symbol" => "XRP-USDT",
            //                    "orderId" => 1514073325788200960,
            //                    "price" => "0.5",
            //                    "origQty" => "20",
            //                    "executedQty" => "0",
            //                    "cummulativeQuoteQty" => "0",
            //                    "status" => "PENDING",
            //                    "type" => "LIMIT",
            //                    "side" => "BUY",
            //                    "time" => 1649818185647,
            //                    "updateTime" => 1649818185647,
            //                    "origQuoteOrderQty" => "0"
            //                }
            //            )
            //        }
            //    }
            //
            // swap
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "data" => {
            //          "orders" => array(
            //            array(
            //              "symbol" => "LINK-USDT",
            //              "orderId" => 1585839271162413056,
            //              "side" => "BUY",
            //              "positionSide" => "LONG",
            //              "type" => "TRIGGER_MARKET",
            //              "origQty" => "5.0",
            //              "price" => "9",
            //              "executedQty" => "0.0",
            //              "avgPrice" => "0",
            //              "cumQuote" => "0",
            //              "stopPrice" => "5",
            //              "profit" => "0.0000",
            //              "commission" => "0.000000",
            //              "status" => "CANCELLED",
            //              "time" => 1667631605000,
            //              "updateTime" => 1667631605000
            //            ),
            //          )
            //        }
            //    }
            //
            $data = $this->safe_value($response, 'data', array());
            $orders = $this->safe_value($data, 'orders', array());
            return $this->parse_orders($orders, $market, $since, $limit);
        }) ();
    }

    public function fetch_closed_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetches information on multiple closed $orders made by the user
             * @see https://bingx-api.github.io/docs/#/spot/trade-api.html#Query%20Order%20History
             * @see https://bingx-api.github.io/docs/#/swapV2/trade-api.html#User's%20Force%20Orders
             * @param {string} [$symbol] unified $market $symbol of the $market $orders were made in
             * @param {int} [$since] the earliest time in ms to fetch $orders for
             * @param {int} [$limit] the maximum number of  orde structures to retrieve
             * @param {array} [$params] extra parameters specific to the bingx api endpoint
             * @param {int} [$params->until] the latest time in ms to fetch $orders for
             * @return {[array]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            $this->check_required_symbol('fetchOrders', $symbol);
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            $response = null;
            list($marketType, $query) = $this->handle_market_type_and_params('fetchOrder', $market, $params);
            if ($marketType === 'spot') {
                $response = Async\await($this->spotV1PrivateGetTradeHistoryOrders (array_merge($request, $query)));
            } else {
                $response = Async\await($this->swapV2PrivateGetTradeAllOrders (array_merge($request, $query)));
            }
            //
            //  spot
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "data" => {
            //            "orders" => array(
            //                {
            //                    "symbol" => "XRP-USDT",
            //                    "orderId" => 1514073325788200960,
            //                    "price" => "0.5",
            //                    "origQty" => "20",
            //                    "executedQty" => "0",
            //                    "cummulativeQuoteQty" => "0",
            //                    "status" => "PENDING",
            //                    "type" => "LIMIT",
            //                    "side" => "BUY",
            //                    "time" => 1649818185647,
            //                    "updateTime" => 1649818185647,
            //                    "origQuoteOrderQty" => "0"
            //                }
            //            )
            //        }
            //    }
            //
            // swap
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "data" => {
            //          "orders" => array(
            //            array(
            //              "symbol" => "LINK-USDT",
            //              "orderId" => 1585839271162413056,
            //              "side" => "BUY",
            //              "positionSide" => "LONG",
            //              "type" => "TRIGGER_MARKET",
            //              "origQty" => "5.0",
            //              "price" => "9",
            //              "executedQty" => "0.0",
            //              "avgPrice" => "0",
            //              "cumQuote" => "0",
            //              "stopPrice" => "5",
            //              "profit" => "0.0000",
            //              "commission" => "0.000000",
            //              "status" => "CANCELLED",
            //              "time" => 1667631605000,
            //              "updateTime" => 1667631605000
            //            ),
            //          )
            //        }
            //    }
            //
            $data = $this->safe_value($response, 'data', array());
            $orders = $this->safe_value($data, 'orders', array());
            return $this->parse_orders($orders, $market, $since, $limit);
        }) ();
    }

    public function transfer(string $code, $amount, $fromAccount, $toAccount, $params = array ()) {
        return Async\async(function () use ($code, $amount, $fromAccount, $toAccount, $params) {
            /**
             * transfer $currency internally between wallets on the same account
             * @see https://bingx-api.github.io/docs/#/spot/account-api.html#User%20Universal%20Transfer
             * @param {string} $code unified $currency $code
             * @param {float} $amount amount to transfer
             * @param {string} $fromAccount account to transfer from
             * @param {string} $toAccount account to transfer to
             * @param {array} [$params] extra parameters specific to the bingx api endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=transfer-structure transfer structure~
             */
            Async\await($this->load_markets());
            $currency = $this->currency($code);
            $accountsByType = $this->safe_value($this->options, 'accountsByType', array());
            $fromId = $this->safe_string($accountsByType, $fromAccount, $fromAccount);
            $toId = $this->safe_string($accountsByType, $toAccount, $toAccount);
            $request = array(
                'asset' => $currency['id'],
                'amount' => $this->currency_to_precision($code, $amount),
                'type' => $fromId . '_' . $toId,
            );
            $response = Async\await($this->spotV3PrivateGetGetAssetTransfer (array_merge($request, $params)));
            //
            //    {
            //        "tranId":13526853623
            //    }
            //
            return array(
                'info' => $response,
                'id' => $this->safe_string($response, 'tranId'),
                'timestamp' => null,
                'datetime' => null,
                'currency' => $code,
                'amount' => $amount,
                'fromAccount' => $fromAccount,
                'toAccount' => $toAccount,
                'status' => null,
            );
        }) ();
    }

    public function fetch_transfers(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($code, $since, $limit, $params) {
            /**
             * fetch a history of internal transfers made on an account
             * @see https://bingx-api.github.io/docs/#/spot/account-api.html#Query%20User%20Universal%20Transfer%20History%20(USER_DATA)
             * @param {string} [$code] unified $currency $code of the $currency transferred
             * @param {int} [$since] the earliest time in ms to fetch transfers for
             * @param {int} [$limit] the maximum number of transfers structures to retrieve
             * @param {array} [$params] extra parameters specific to the bingx api endpoint
             * @return {[array]} a list of ~@link https://docs.ccxt.com/#/?id=transfer-structure transfer structures~
             */
            Async\await($this->load_markets());
            $currency = null;
            if ($code !== null) {
                $currency = $this->currency($code);
            }
            $accountsByType = $this->safe_value($this->options, 'accountsByType', array());
            $fromAccount = $this->safe_string($params, 'fromAccount');
            $toAccount = $this->safe_string($params, 'toAccount');
            $fromId = $this->safe_string($accountsByType, $fromAccount, $fromAccount);
            $toId = $this->safe_string($accountsByType, $toAccount, $toAccount);
            if ($fromId === null || $toId === null) {
                throw new ExchangeError($this->id . ' $fromAccount & $toAccount parameter are required');
            }
            $request = array(
                'type' => $fromId . '_' . $toId,
            );
            if ($since !== null) {
                $request['startTime'] = $since;
            }
            if ($limit !== null) {
                $request['size'] = $limit;
            }
            $response = Async\await($this->spotV3PrivateGetAssetTransfer (array_merge($request, $params)));
            //
            //     {
            //         total => 3,
            //         $rows => array(
            //             array(
            //                 "asset":"USDT",
            //                 "amount":"-100.00000000000000000000",
            //                 "type":"FUND_SFUTURES",
            //                 "status":"CONFIRMED",
            //                 "tranId":1067594500957016069,
            //                 "timestamp":1658388859000
            //             ),
            //         )
            //     }
            //
            $rows = $this->safe_value($response, 'rows', array());
            return $this->parse_transfers($rows, $currency, $since, $limit);
        }) ();
    }

    public function parse_transfer($transfer, $currency = null) {
        $tranId = $this->safe_string($transfer, 'tranId');
        $timestamp = $this->safe_integer($transfer, 'timestamp');
        $currencyCode = $this->safe_currency_code(null, $currency);
        $status = $this->safe_string($transfer, 'status');
        $accountsById = $this->safe_value($this->options, 'accountsById', array());
        $typeId = $this->safe_string($transfer, 'type');
        $typeIdSplit = explode('_', $typeId);
        $fromId = $this->safe_string($typeIdSplit, 0);
        $toId = $this->safe_string($typeId, 1);
        $fromAccount = $this->safe_string($accountsById, $fromId, $fromId);
        $toAccount = $this->safe_string($accountsById, $toId, $toId);
        return array(
            'info' => $transfer,
            'id' => $tranId,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'currency' => $currencyCode,
            'amount' => $this->safe_number($transfer, 'amount'),
            'fromAccount' => $fromAccount,
            'toAccount' => $toAccount,
            'status' => $status,
        );
    }

    public function fetch_deposits(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($code, $since, $limit, $params) {
            /**
             * fetch all deposits made to an account
             * @see https://bingx-api.github.io/docs/#/spot/account-api.html#Deposit%20History(supporting%20network)
             * @param {string} [$code] unified $currency $code
             * @param {int} [$since] the earliest time in ms to fetch deposits for
             * @param {int} [$limit] the maximum number of deposits structures to retrieve
             * @param {array} [$params] extra parameters specific to the bingx api endpoint
             * @return {[array]} a list of ~@link https://docs.ccxt.com/#/?id=transaction-structure transaction structures~
             */
            Async\await($this->load_markets());
            $request = array(
            );
            $currency = null;
            if ($code !== null) {
                $currency = $this->currency($code);
                $request['coin'] = $currency['id'];
            }
            if ($since !== null) {
                $request['startTime'] = $since;
            }
            if ($limit !== null) {
                $request['limit'] = $limit; // default 1000
            }
            $response = Async\await($this->spotV3PrivateGetCapitalDepositHisrec (array_merge($request, $params)));
            //
            //    array(
            //        array(
            //            "amount":"0.00999800",
            //            "coin":"PAXG",
            //            "network":"ETH",
            //            "status":1,
            //            "address":"0x788cabe9236ce061e5a892e1a59395a81fc8d62c",
            //            "addressTag":"",
            //            "txId":"0xaad4654a3234aa6118af9b4b335f5ae81c360b2394721c019b5d1e75328b09f3",
            //            "insertTime":1599621997000,
            //            "transferType":0,
            //            "unlockConfirm":"12/12", // confirm times for unlocking
            //            "confirmTimes":"12/12"
            //        ),
            //    )
            //
            return $this->parse_transactions($response, $currency, $since, $limit);
        }) ();
    }

    public function fetch_withdrawals(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($code, $since, $limit, $params) {
            /**
             * fetch all withdrawals made from an account
             * @see https://bingx-api.github.io/docs/#/spot/account-api.html#Withdraw%20History%20(supporting%20network)
             * @param {string} [$code] unified $currency $code
             * @param {int} [$since] the earliest time in ms to fetch withdrawals for
             * @param {int} [$limit] the maximum number of withdrawals structures to retrieve
             * @param {array} [$params] extra parameters specific to the bingx api endpoint
             * @return {[array]} a list of ~@link https://docs.ccxt.com/#/?id=transaction-structure transaction structures~
             */
            Async\await($this->load_markets());
            $request = array(
            );
            $currency = null;
            if ($code !== null) {
                $currency = $this->currency($code);
                $request['coin'] = $currency['id'];
            }
            if ($since !== null) {
                $request['startTime'] = $since;
            }
            if ($limit !== null) {
                $request['limit'] = $limit; // default 1000
            }
            $response = Async\await($this->spotV3PrivateGetCapitalWithdrawHistory (array_merge($request, $params)));
            //
            //    array(
            //        array(
            //            "address" => "0x94df8b352de7f46f64b01d3666bf6e936e44ce60",
            //            "amount" => "8.91000000",
            //            "applyTime" => "2019-10-12 11:12:02",
            //            "coin" => "USDT",
            //            "id" => "b6ae22b3aa844210a7041aee7589627c",
            //            "withdrawOrderId" => "WITHDRAWtest123",
            //            "network" => "ETH",
            //            "transferType" => 0
            //            "status" => 6,
            //            "transactionFee" => "0.004",
            //            "confirmNo":3,
            //            "info" => "The address is not valid. Please confirm with the recipient",
            //            "txId" => "0xb5ef8c13b968a406cc62a93a8bd80f9e9a906ef1b3fcf20a2e48573c17659268"
            //        ),
            //    )
            //
            return $this->parse_transactions($response, $currency, $since, $limit);
        }) ();
    }

    public function parse_transaction($transaction, $currency = null) {
        //
        // fetchDeposits
        //
        //    {
        //        "amount":"0.00999800",
        //        "coin":"PAXG",
        //        "network":"ETH",
        //        "status":1,
        //        "address":"0x788cabe9236ce061e5a892e1a59395a81fc8d62c",
        //        "addressTag":"",
        //        "txId":"0xaad4654a3234aa6118af9b4b335f5ae81c360b2394721c019b5d1e75328b09f3",
        //        "insertTime":1599621997000,
        //        "transferType":0,
        //        "unlockConfirm":"12/12", // confirm times for unlocking
        //        "confirmTimes":"12/12"
        //    }
        //
        // fetchWithdrawals
        //
        //    {
        //        "address" => "0x94df8b352de7f46f64b01d3666bf6e936e44ce60",
        //        "amount" => "8.91000000",
        //        "applyTime" => "2019-10-12 11:12:02",
        //        "coin" => "USDT",
        //        "id" => "b6ae22b3aa844210a7041aee7589627c",
        //        "withdrawOrderId" => "WITHDRAWtest123",
        //        "network" => "ETH",
        //        "transferType" => 0
        //        "status" => 6,
        //        "transactionFee" => "0.004",
        //        "confirmNo":3,
        //        "info" => "The $address is not valid. Please confirm with the recipient",
        //        "txId" => "0xb5ef8c13b968a406cc62a93a8bd80f9e9a906ef1b3fcf20a2e48573c17659268"
        //    }
        //
        $address = $this->safe_string($transaction, 'address');
        $tag = $this->safe_string($transaction, 'addressTag');
        $timestamp = $this->safe_integer($transaction, 'insertTime');
        $datetime = $this->iso8601($timestamp);
        if ($timestamp === null) {
            $datetime = $this->safe_string($transaction, 'applyTime');
            $timestamp = $this->parse8601($datetime);
        }
        $network = $this->safe_string($transaction, 'network');
        $currencyId = $this->safe_string($transaction, 'coin');
        $code = $this->safe_currency_code($currencyId, $currency);
        if ($code !== null && mb_strpos($code, $network) !== false) {
            $code = str_replace($network, '', $code);
        }
        $rawType = $this->safe_string($transaction, 'transferType');
        $type = ($rawType === '0') ? 'deposit' : 'withdrawal';
        return array(
            'info' => $transaction,
            'id' => $this->safe_string($transaction, 'id'),
            'txid' => $this->safe_string($transaction, 'txId'),
            'type' => $type,
            'currency' => $code,
            'network' => $this->network_id_to_code($network),
            'amount' => $this->safe_number($transaction, 'amount'),
            'status' => $this->parse_transaction_status($this->safe_string($transaction, 'status')),
            'timestamp' => $timestamp,
            'datetime' => $datetime,
            'address' => $address,
            'addressFrom' => null,
            'addressTo' => $address,
            'tag' => $tag,
            'tagFrom' => $tag,
            'tagTo' => null,
            'updated' => null,
            'comment' => $this->safe_string($transaction, 'info'),
            'fee' => array(
                'currency' => $code,
                'cost' => $this->safe_number($transaction, 'transactionFee'),
                'rate' => null,
            ),
        );
    }

    public function parse_transaction_status($status) {
        $statuses = array(
            '0' => 'ok',
            '10' => 'pending',
            '20' => 'rejected',
            '30' => 'ok',
            '40' => 'rejected',
            '50' => 'ok',
            '60' => 'pending',
            '70' => 'rejected',
            '2' => 'pending',
            '3' => 'rejected',
            '4' => 'pending',
            '5' => 'rejected',
            '6' => 'ok',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function set_margin_mode(string $marginMode, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($marginMode, $symbol, $params) {
            /**
             * set margin mode to 'cross' or 'isolated'
             * @see https://bingx-api.github.io/docs/#/swapV2/trade-api.html#Switch%20Margin%20Mode
             * @param {string} $marginMode 'cross' or 'isolated'
             * @param {string} $symbol unified $market $symbol
             * @param {array} [$params] extra parameters specific to the bingx api endpoint
             * @return {array} response from the exchange
             */
            $this->check_required_symbol('setMarginMode', $symbol);
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            if ($market['type'] !== 'swap') {
                throw new BadSymbol($this->id . ' setMarginMode() supports swap contracts only');
            }
            $marginMode = strtoupper($marginMode);
            if ($marginMode === 'CROSS') {
                $marginMode = 'CROSSED';
            }
            if ($marginMode !== 'ISOLATED' && $marginMode !== 'CROSSED') {
                throw new BadRequest($this->id . ' setMarginMode() $marginMode argument should be isolated or cross');
            }
            $request = array(
                'symbol' => $market['id'],
                'marginType' => $marginMode,
            );
            return Async\await($this->swapV2PrivatePostTradeMarginType (array_merge($request, $params)));
        }) ();
    }

    public function set_margin(string $symbol, $amount, $params = array ()) {
        return Async\async(function () use ($symbol, $amount, $params) {
            /**
             * Either adds or reduces margin in an isolated position in order to set the margin to a specific value
             * @see https://bingx-api.github.io/docs/#/swapV2/trade-api.html#Adjust%20isolated%20margin
             * @param {string} $symbol unified $market $symbol of the $market to set margin in
             * @param {float} $amount the $amount to set the margin to
             * @param {array} [$params] parameters specific to the bingx api endpoint
             * @return {array} A ~@link https://docs.ccxt.com/#/?id=add-margin-structure margin structure~
             */
            $type = $this->safe_integer($params, 'type'); // 1 increase margin 2 decrease margin
            if ($type === null) {
                throw new ArgumentsRequired($this->id . ' setMargin() requires a $type parameter either 1 (increase margin) or 2 (decrease margin)');
            }
            if (!$this->in_array($type, array( 1, 2 ))) {
                throw new ArgumentsRequired($this->id . ' setMargin() requires a $type parameter either 1 (increase margin) or 2 (decrease margin)');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
                'amount' => $this->amount_to_precision($market['symbol'], $amount),
                'type' => $type,
            );
            $response = Async\await($this->swapV2PrivatePostTradePositionMargin (array_merge($request, $params)));
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "amount" => 1,
            //        "type" => 1
            //    }
            //
            return $response;
        }) ();
    }

    public function fetch_leverage(string $symbol, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetch the set leverage for a $market
             * @see https://bingx-api.github.io/docs/#/swapV2/trade-api.html#Query%20Leverage
             * @param {string} $symbol unified $market $symbol
             * @param {array} [$params] extra parameters specific to the bingx api endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=leverage-structure leverage structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            $response = Async\await($this->swapV2PrivateGetTradeLeverage (array_merge($request, $params)));
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "data" => {
            //            "longLeverage" => 6,
            //            "shortLeverage" => 6
            //        }
            //    }
            //
            return $response;
        }) ();
    }

    public function set_leverage($leverage, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($leverage, $symbol, $params) {
            /**
             * set the level of $leverage for a $market
             * @see https://bingx-api.github.io/docs/#/swapV2/trade-api.html#Switch%20Leverage
             * @param {float} $leverage the rate of $leverage
             * @param {string} $symbol unified $market $symbol
             * @param {array} [$params] extra parameters specific to the bingx api endpoint
             * @return {array} response from the exchange
             */
            $this->check_required_symbol('setLeverage', $symbol);
            $side = $this->safe_string_upper($params, 'side');
            $this->check_required_argument('setLeverage', $side, 'side', array( 'LONG', 'SHORT' ));
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
                'side' => $side,
                'leverage' => $leverage,
            );
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "data" => {
            //            "leverage" => 6,
            //            "symbol" => "BTC-USDT"
            //        }
            //    }
            //
            return Async\await($this->swapV2PrivatePostTradeLeverage (array_merge($request, $params)));
        }) ();
    }

    public function fetch_my_trades(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetch all trades made by the user
             * @see https://bingx-api.github.io/docs/#/swapV2/trade-api.html#Query%20historical%20transaction%20orders
             * @param {string} [$symbol] unified $market $symbol
             * @param {int} [$since] the earliest time in ms to fetch trades for
             * @param {int} [$limit] the maximum number of trades structures to retrieve
             * @param {array} [$params] extra parameters specific to the bingx api endpoint
             * @param {string} $params->trandingUnit COIN (directly represent assets such and ETH) or CONT (represents the number of contract sheets)
             * @return {[array]} a list of ~@link https://docs.ccxt.com/#/?id=trade-structure trade structures~
             */
            $this->check_required_argument('fetchMyTrades', $symbol, 'symbol');
            $this->check_required_argument('fetchMyTrades', $since, 'since');
            $tradingUnit = $this->safe_string_upper($params, 'tradingUnit', 'CONT');
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            if ($market['spot']) {
                throw new BadSymbol($this->id . ' fetchMyTrades() supports swap contracts only');
            }
            $request = array(
                'symbol' => $market['id'],
                'tradingUnit' => $tradingUnit,
                'startTs' => $since,
                'endTs' => $this->nonce(),
            );
            $query = $this->omit($params, 'tradingUnit');
            $response = Async\await($this->swapV2PrivateGetTradeAllFillOrders (array_merge($request, $query)));
            //
            //    {
            //       code => '0',
            //       msg => '',
            //       $data => { fill_orders => array(
            //          {
            //              volume => '0.1',
            //              price => '106.75',
            //              amount => '10.6750',
            //              commission => '-0.0053',
            //              currency => 'USDT',
            //              orderId => '1676213270274379776',
            //              liquidatedPrice => '0.00',
            //              liquidatedMarginRatio => '0.00',
            //              filledTime => '2023-07-04T20:56:01.000+0800'
            //          }
            //        )
            //      }
            //    }
            //
            $data = $this->safe_value($response, 'data', array());
            $fillOrders = $this->safe_value($data, 'fill_orders', array());
            return $this->parse_trades($fillOrders, $market, $since, $limit, $query);
        }) ();
    }

    public function parse_deposit_withdraw_fee($fee, $currency = null) {
        //
        //    {
        //        coin => 'BTC',
        //        name => 'BTC',
        //        $networkList => array(
        //          array(
        //            name => 'BTC',
        //            $network => 'BTC',
        //            $isDefault => true,
        //            minConfirm => '2',
        //            withdrawEnable => true,
        //            withdrawFee => '0.00035',
        //            withdrawMax => '1.62842',
        //            withdrawMin => '0.0005'
        //          ),
        //          {
        //            name => 'BTC',
        //            $network => 'BEP20',
        //            $isDefault => false,
        //            minConfirm => '15',
        //            withdrawEnable => true,
        //            withdrawFee => '0.00001',
        //            withdrawMax => '1.62734',
        //            withdrawMin => '0.0001'
        //          }
        //        )
        //    }
        //
        $networkList = $this->safe_value($fee, 'networkList', array());
        $networkListLength = count($networkList);
        $result = array(
            'info' => $fee,
            'withdraw' => array(
                'fee' => null,
                'percentage' => null,
            ),
            'deposit' => array(
                'fee' => null,
                'percentage' => null,
            ),
            'networks' => array(),
        );
        if ($networkListLength !== 0) {
            for ($i = 0; $i < $networkListLength; $i++) {
                $network = $networkList[$i];
                $networkId = $this->safe_string($network, 'network');
                $isDefault = $this->safe_value($network, 'isDefault');
                $currencyCode = $this->safe_string($currency, 'code');
                $networkCode = $this->network_id_to_code($networkId, $currencyCode);
                $result['networks'][$networkCode] = array(
                    'deposit' => array( 'fee' => null, 'percentage' => null ),
                    'withdraw' => array( 'fee' => $this->safe_number($network, 'withdrawFee'), 'percentage' => false ),
                );
                if ($isDefault) {
                    $result['withdraw']['fee'] = $this->safe_number($network, 'withdrawFee');
                    $result['withdraw']['percentage'] = false;
                }
            }
        }
        return $result;
    }

    public function fetch_deposit_withdraw_fees(?array $codes = null, $params = array ()) {
        return Async\async(function () use ($codes, $params) {
            /**
             * fetch deposit and withdraw fees
             * @see https://bingx-api.github.io/docs/#/common/account-api.html#All%20Coins'%20Information
             * @param {[string]|null} $codes list of unified currency $codes
             * @param {array} [$params] extra parameters specific to the bingx api endpoint
             * @return {array} a list of {@link https://docs.ccxt.com/en/latest/manual.html#fee-structure fee structures}
             */
            Async\await($this->load_markets());
            $response = Async\await($this->walletsV1PrivateGetCapitalConfigGetall ($params));
            $coins = $this->safe_value($response, 'data');
            return $this->parse_deposit_withdraw_fees($coins, $codes, 'coin');
        }) ();
    }

    public function withdraw(string $code, $amount, $address, $tag = null, $params = array ()) {
        return Async\async(function () use ($code, $amount, $address, $tag, $params) {
            /**
             * make a withdrawal
             * @see https://bingx-api.github.io/docs/#/common/account-api.html#Withdraw
             * @param {string} $code unified $currency $code
             * @param {float} $amount the $amount to withdraw
             * @param {string} $address the $address to withdraw to
             * @param {string} [$tag]
             * @param {array} [$params] extra parameters specific to the bingx api endpoint
             * @param {int} [$params->walletType] 1 fund account, 2 standard account, 3 perpetual account
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=transaction-structure transaction structure~
             */
            Async\await($this->load_markets());
            $currency = $this->currency($code);
            $walletType = $this->safe_integer($params, 'walletType');
            if ($walletType === null) {
                $walletType = 1;
            }
            if (!$this->in_array($walletType, array( 1, 2, 3 ))) {
                throw new BadRequest($this->id . ' withdraw() requires either 1 fund account, 2 standard futures account, 3 perpetual account for walletType');
            }
            $request = array(
                'coin' => $currency['id'],
                'address' => $address,
                'amount' => $this->number_to_string($amount),
                'walletType' => $walletType,
            );
            $network = $this->safe_string_upper($params, 'network');
            if ($network !== null) {
                $request['network'] = $this->network_code_to_id($network);
            }
            $params = $this->omit($params, array( 'walletType', 'network' ));
            $response = Async\await($this->walletsV1PrivatePostCapitalWithdrawApply (array_merge($request, $params)));
            $data = $this->safe_value($response, 'data');
            //    {
            //        "code":0,
            //        "timestamp":1689258953651,
            //        "data":{
            //           "id":"1197073063359000577"
            //        }
            //    }
            $this->parse_transaction($data);
        }) ();
    }

    public function sign($path, $section = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $type = $section[0];
        $version = $section[1];
        $access = $section[2];
        $url = $this->implode_hostname($this->urls['api'][$type]);
        if ($type === 'spot' && $version === 'v3') {
            $url .= '/api';
        } else {
            $url .= '/' . $type;
        }
        $url .= '/' . $version . '/';
        $path = $this->implode_params($path, $params);
        $url .= $path;
        $params = $this->omit($params, $this->extract_params($path));
        $params = $this->keysort($params);
        if ($access === 'public') {
            if ($params) {
                $url .= '?' . $this->urlencode($params);
            }
        } elseif ($access === 'private') {
            $this->check_required_credentials();
            $params['timestamp'] = $this->nonce();
            $query = $this->urlencode($params);
            $signature = $this->hmac($this->encode($query), $this->encode($this->secret), 'sha256');
            if ($params) {
                $query = '?' . $query . '&';
            } else {
                $query .= '?';
            }
            $query .= 'signature=' . $signature;
            $headers = array(
                'X-BX-APIKEY' => $this->apiKey,
                'X-SOURCE-KEY' => 'CCXT',
            );
            $url .= $query;
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function nonce() {
        return $this->milliseconds();
    }

    public function handle_errors($httpCode, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if ($response === null) {
            return null; // fallback to default error handler
        }
        //
        //    {
        //        "code" => 80014,
        //        "msg" => "Invalid parameters, err:Key => 'GetTickerRequest.Symbol' Error:Field validation for 'Symbol' failed on the 'len=0|endswith=-USDT' tag",
        //        "data" => {
        //        }
        //    }
        //
        $code = $this->safe_string($response, 'code');
        $message = $this->safe_string($response, 'msg');
        if ($code !== null && $code !== '0') {
            $feedback = $this->id . ' ' . $body;
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $message, $feedback);
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $code, $feedback);
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $message, $feedback);
            throw new ExchangeError($feedback); // unknown $message
        }
        return null;
    }
}
