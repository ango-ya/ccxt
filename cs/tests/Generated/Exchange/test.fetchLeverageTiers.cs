using ccxt;
namespace Tests;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


public partial class testMainClass : BaseTest
{
    async static public Task testFetchLeverageTiers(Exchange exchange, object skippedProperties, object symbol)
    {
        object method = "fetchLeverageTiers";
        object tiers = await exchange.fetchLeverageTiers(symbol);
        // const format = {
        //     'RAY/USDT': [
        //       {},
        //     ],
        // };
        assert((tiers is IDictionary<string, object>), add(add(add(add(add(add(exchange.id, " "), method), " "), symbol), " must return an object. "), exchange.json(tiers)));
        object tierKeys = new List<object>(((IDictionary<string,object>)tiers).Keys);
        object arrayLength = getArrayLength(tierKeys);
        assert(isGreaterThanOrEqual(arrayLength, 1), add(add(add(add(add(add(exchange.id, " "), method), " "), symbol), " must have at least one entry. "), exchange.json(tiers)));
        for (object i = 0; isLessThan(i, arrayLength); postFixIncrement(ref i))
        {
            object tiersForSymbol = getValue(tiers, getValue(tierKeys, i));
            object arrayLengthSymbol = getArrayLength(tiersForSymbol);
            assert(isGreaterThanOrEqual(arrayLengthSymbol, 1), add(add(add(add(add(add(exchange.id, " "), method), " "), symbol), " must have at least one entry. "), exchange.json(tiers)));
            for (object j = 0; isLessThan(j, getArrayLength(tiersForSymbol)); postFixIncrement(ref j))
            {
                testLeverageTier(exchange, skippedProperties, method, getValue(tiersForSymbol, j));
            }
        }
    }

}